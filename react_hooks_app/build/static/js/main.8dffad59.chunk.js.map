{"version":3,"sources":["pages/About.js","context/alert/alertContext.js","context/firebase/firebaseContext.js","components/Form.js","components/Notes.js","components/Loader.js","pages/Home.js","components/Navbar.js","components/Arert.js","context/alert/alertReducer.js","context/types.js","context/alert/AlertState.js","context/firebase/firebaseReducer.js","context/firebase/FirebaseState.js","App.js","serviceWorker.js","index.js"],"names":["About","className","AlertContext","createContext","FirebaseContext","Form","useState","value","setValue","alert","useContext","firebase","onSubmit","e","preventDefault","trim","addNote","then","show","catch","type","placeholder","onChange","target","Notes","notes","TransitionGroup","component","map","note","CSSTransition","key","id","classNames","timeout","title","date","onClick","removeNote","Loader","role","Home","loading","fetchNotes","useEffect","Navbar","to","exact","Alert","hide","in","visible","enter","exit","mountOnEnter","unmountOnExit","text","aria-label","aria-hidden","handlers","state","payload","alertReducer","action","DEFAULT","AlertState","children","useReducer","dispatch","Provider","filter","firebaseReducer","url","process","FirebaseState","showLoader","a","axios","get","res","Object","keys","data","Date","toJSON","post","name","Error","message","delete","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.8dffad59.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const About = () => (\r\n  <div className='jumbotron'>\r\n    <div className='container'>\r\n      <h1 className='display-4'>React приложение</h1>\r\n      <p className='lead'>Версия 1.2.32</p>\r\n    </div>\r\n  </div>\r\n)","import { createContext } from 'react';\r\n\r\nexport const AlertContext = createContext()","import { createContext } from 'react'\r\n\r\nexport const FirebaseContext = createContext()","import React, { useState, useContext } from 'react';\r\nimport { AlertContext } from '../context/alert/alertContext';\r\nimport { FirebaseContext } from '../context/firebase/firebaseContext';\r\n\r\nexport const Form = () => {\r\n  const [value, setValue] = useState('')\r\n  const alert = useContext(AlertContext)\r\n  const firebase = useContext(FirebaseContext)\r\n\r\n\r\n  const submitHandler = e => {\r\n    e.preventDefault()\r\n\r\n    if (value.trim()) {\r\n      firebase.addNote(value.trim()).then(() => {\r\n        alert.show('Заметка была создана', 'success')\r\n      }).catch(() => {\r\n        alert.show('Что-то пошло не так', 'danger')\r\n      })\r\n      setValue('')\r\n    } else {\r\n      alert.show('Введите название заметки')\r\n    }\r\n  }\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className='form-group'>\r\n        <input\r\n          type='text'\r\n          className='form-control'\r\n          placeholder='Введите название заметки'\r\n          value={value}\r\n          onChange={e => setValue(e.target.value)}\r\n        />\r\n      </div>\r\n    </form>\r\n  )\r\n}","import React, { useContext } from 'react';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\r\nimport { AlertContext } from '../context/alert/alertContext';\r\nimport { FirebaseContext } from '../context/firebase/firebaseContext';\r\n\r\nexport const Notes = ({ notes }) => {\r\n  const alert = useContext(AlertContext)\r\n  const firebase = useContext(FirebaseContext)\r\n\r\n  const onRemove = id => {\r\n    firebase.removeNote(id).then(() => {\r\n      alert.show('Заметка была удалена', 'success')\r\n    }).catch(() => {\r\n      alert.show('Что-то пошло не так', 'danger')\r\n    })\r\n  }\r\n\r\n  return (\r\n    <TransitionGroup component='ul' className='list-group'>\r\n      {notes.map(note => (\r\n        <CSSTransition key={note.id} classNames={'note'} timeout={800}>\r\n          <li className='list-group-item note'>\r\n            <div>\r\n              <strong>{note.title}</strong>\r\n              <small>{note.date}</small>\r\n            </div>\r\n            <button type='button' className='btn btn-outline-danger btn-sm' onClick={() => onRemove(note.id)}>&times;</button>\r\n          </li>\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  )\r\n}","import React from 'react'\r\n\r\nexport const Loader = () => (\r\n  <div className='text-center'>\r\n    <div className='spinner-border' role='status'>\r\n      <span className='sr-only'>Loading...</span>\r\n    </div>\r\n  </div>\r\n)","import React, { Fragment, useContext, useEffect } from 'react';\r\nimport { Form } from '../components/Form';\r\nimport { Notes } from '../components/Notes';\r\nimport { FirebaseContext } from '../context/firebase/firebaseContext';\r\nimport { Loader } from '../components/Loader';\r\n\r\nexport const Home = () => {\r\n  const { loading, notes, fetchNotes } = useContext(FirebaseContext)\r\n\r\n  useEffect(() => {\r\n    fetchNotes()\r\n    // eslint-disable-next-line\r\n  }, [])\r\n  return (\r\n    <Fragment>\r\n      <Form />\r\n      <hr />\r\n      {loading\r\n        ? <Loader />\r\n        : <Notes notes={notes} />\r\n      }\r\n    </Fragment>\r\n  )\r\n}","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport const Navbar = () => (\r\n  <nav className='navbar navbar-dark navbar-expand-lg bg-primary'>\r\n    <div className='navbar-brand'>\r\n      Note App\r\n    </div>\r\n    <ul className='navbar-nav'>\r\n      <li className='nav-item'>\r\n        <NavLink className='nav-link' to='/' exact>\r\n          Главная\r\n        </NavLink>\r\n      </li>\r\n      <li className='nav-item'>\r\n        <NavLink className='nav-link' to='/about'>\r\n          Информация\r\n        </NavLink>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n)","import React, { useContext } from 'react';\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport { AlertContext } from '../context/alert/alertContext';\r\n\r\nexport const Alert = () => {\r\n  const { alert, hide } = useContext(AlertContext)\r\n  return (\r\n    <CSSTransition\r\n      in={alert.visible}\r\n      timeout={{\r\n        enter: 500,\r\n        exit: 350\r\n      }}\r\n      classNames={'alert'}\r\n      mountOnEnter\r\n      unmountOnExit\r\n    >\r\n      <div className={`alert alert-${alert.type || 'warning'} alert-dismissible`}>\r\n        <strong>Внимание!</strong>\r\n        &nbsp;{alert.text}\r\n        <button onClick={hide} type='button' className='close' aria-label='Close'>\r\n          <span aria-hidden='true'>&times;</span>\r\n        </button>\r\n      </div>\r\n    </CSSTransition>\r\n  )\r\n}","import { HIDE_ALERT, SHOW_ALERT } from '../types'\r\n\r\nconst handlers = {\r\n  [SHOW_ALERT]: (state, { payload }) => ({ ...payload, visible: true }),\r\n  [HIDE_ALERT]: state => ({ ...state, visible: false }),\r\n  DEFAULT: state => state\r\n}\r\n\r\nexport const alertReducer = (state, action) => {\r\n  const handle = handlers[action.type] || handlers.DEFAULT\r\n  return handle(state, action)\r\n}","export const SHOW_ALERT = 'SHOW_ALERT'\r\nexport const HIDE_ALERT = 'HIDE_ALERT'\r\nexport const SHOW_LOADER = 'SHOW_LOADER'\r\nexport const ADD_NOTE = 'ADD_NOTE'\r\nexport const FETCH_NOTES = 'FETCH_NOTES'\r\nexport const REMOVE_NOTE = 'REMOVE_NOTE'","import React, { useReducer } from 'react';\r\nimport { AlertContext } from './alertContext'\r\nimport { alertReducer } from './alertReducer'\r\nimport { SHOW_ALERT, HIDE_ALERT } from '../types';\r\n\r\nexport const AlertState = ({ children }) => {\r\n  const [state, dispatch] = useReducer(alertReducer, { visible: false })\r\n\r\n  const show = (text, type = 'warning') => {\r\n    dispatch({\r\n      type: SHOW_ALERT,\r\n      payload: { text, type }\r\n    })\r\n  }\r\n\r\n  const hide = () => dispatch({ type: HIDE_ALERT })\r\n\r\n  return (\r\n    <AlertContext.Provider value={{\r\n      show, hide,\r\n      alert: state\r\n    }}>\r\n      {children}\r\n    </AlertContext.Provider>\r\n  )\r\n}","import { SHOW_LOADER, ADD_NOTE, REMOVE_NOTE, FETCH_NOTES } from '../types'\r\n\r\nconst handlers = {\r\n  [SHOW_LOADER]: state => ({ ...state, loading: true }),\r\n  [ADD_NOTE]: (state, { payload }) => ({\r\n    ...state,\r\n    notes: [...state.notes, payload]\r\n  }),\r\n  [REMOVE_NOTE]: (state, { payload }) => ({\r\n    ...state,\r\n    notes: state.notes.filter(note => note.id !== payload)\r\n  }),\r\n  [FETCH_NOTES]: (state, { payload }) => ({ ...state, notes: payload, loading: false }),\r\n  DEFAULT: state => state\r\n}\r\n\r\nexport const firebaseReducer = (state, action) => {\r\n  const handle = handlers[action.type] || handlers.DEFAULT\r\n  return handle(state, action)\r\n}","import React, { useReducer } from 'react'\r\nimport axios from 'axios'\r\nimport { FirebaseContext } from './firebaseContext'\r\nimport { firebaseReducer } from './firebaseReducer'\r\nimport { SHOW_LOADER, REMOVE_NOTE, ADD_NOTE, FETCH_NOTES } from '../types'\r\n\r\nconst url = process.env.REACT_APP_DB_URL\r\n\r\nexport const FirebaseState = ({ children }) => {\r\n  const initialState = {\r\n    notes: [],\r\n    loading: false\r\n  }\r\n\r\n  const [state, dispatch] = useReducer(firebaseReducer, initialState)\r\n\r\n  const showLoader = () => dispatch({ type: SHOW_LOADER })\r\n\r\n  const fetchNotes = async () => {\r\n    showLoader()\r\n    const res = await axios.get(`${url}/notes.json`)\r\n\r\n    const payload = Object.keys(res.data || []).map(key => {\r\n      return {\r\n        ...res.data[key],\r\n        id: key\r\n      }\r\n    })\r\n    dispatch({ type: FETCH_NOTES, payload })\r\n  }\r\n\r\n  const addNote = async title => {\r\n    const note = {\r\n      title,\r\n      date: new Date().toJSON()\r\n    }\r\n    try {\r\n      const res = await axios.post(`${url}/notes.json`, note)\r\n      const payload = {\r\n        ...note,\r\n        id: res.data.name\r\n      }\r\n      dispatch({ type: ADD_NOTE, payload })\r\n    } catch (e) {\r\n      throw new Error(e.message)\r\n    }\r\n  }\r\n\r\n  const removeNote = async id => {\r\n    try {\r\n      await axios.delete(`${url}/notes/${id}.json`)\r\n      dispatch({ type: REMOVE_NOTE, payload: id })\r\n    } catch (e) {\r\n      throw new Error(e.message)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <FirebaseContext.Provider value={{\r\n      showLoader, addNote, removeNote, fetchNotes,\r\n      loading: state.loading,\r\n      notes: state.notes\r\n    }}>\r\n      {children}\r\n    </FirebaseContext.Provider>\r\n  )\r\n}","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { About } from './pages/About';\nimport { Home } from './pages/Home';\nimport { Navbar } from './components/Navbar';\nimport { Alert } from './components/Arert';\nimport { AlertState } from './context/alert/AlertState';\nimport { FirebaseState } from './context/firebase/FirebaseState';\n\nfunction App() {\n  return (\n    <FirebaseState>\n      <AlertState>\n        <BrowserRouter>\n          <Navbar />\n          <div className='container pt-4'>\n            <Alert />\n            <Switch>\n              <Route path={'/'} exact component={Home} />\n              <Route path={'/about'} component={About} />\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </AlertState>\n    </FirebaseState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // 'Content is cached for offline use.' message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}